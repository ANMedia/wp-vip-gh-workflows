name: Deploy to Built

on:
  workflow_call:
    secrets:
      COMPOSER_AUTH:
        required: true

permissions: write-all

jobs:
  deploy-built:
    name: Deploy to -built
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VIP_DEPLOY_SUFFIX: "-built"
      # needed to install private packages from dmg-satis.net
      COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{secrets.COMPOSER_AUTH}}"} }' # [tl! **]
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
      
      # setup PHP deps
      - name: Composer self-update
        run: sudo composer self-update
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader --dev
      
      # setup JS deps
      - name: Install NPM dependencies
        run: npm ci 
      - name: NPM build
        run: npm run build
      
      # create a deployment artifact
      - name: Create build directory
        run: mkdir -p build
      - name: Create build readme
        run: |
          echo -e "# Continuous Integration & Continuous Deployment on VIP\n\nThis was built in CI on $(date)" > build/README.md
      - name: Add some helpful info to the ./build/README.md
        run: |
          echo -e "\nThis \`${GITHUB_REF_NAME}${VIP_DEPLOY_SUFFIX}\` branch was created automatically" \
          "when a commit or merge was made to the base branch, \`${GITHUB_REF_NAME}\`, using" \
          "[a GitHub Actions workflow](../.github/workflows/), which can be **customized**." >> build/README.md

          echo -e "\nSee the WordPress VIP documentation about [Build and Deploy](https://docs.wpvip.com/code-deployment/default-deployment/build-and-deploy/)." >> build/README.md
      - name: Test the build
        run: |
          if [ -f build/README.md ]; then
            echo "Build succeeded";
          else
            echo "Build failed, file missing"; exit 1
          fi

      # REQUIRED: Fetch and run the VIP deploy script to push the build artifacts to the built branch.
      # If amending an existing config, the step below is one of the required steps to include.
      # This will push the result to the {current_branch}-built branch,
      # or {current_branch}{VIP_DEPLOY_SUFFIX} if a suffix is configured above.
      #
      # NOTE: For the changes to be deployed, the WordPress VIP application must be configured
      # to deploy from the built branch.
      # https://docs.wpvip.com/code-deployment/default-deployment/deploying-branches/update/
      #
      # The {{ secrets.GITHUB_TOKEN }} variable is an automatically generated token used to push
      # the new built branch to this GitHub repository.
      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication
      - name: Deploy built branch to GitHub
        run: |
          export GITHUB_AUTH_TOKEN=$(echo -n "x-access-token:${{ secrets.GITHUB_TOKEN }}" | base64 -w 0)
          bash <(curl -s "https://raw.githubusercontent.com/Automattic/vip-go-build/master/deploy.sh")
